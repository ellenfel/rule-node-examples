System.register(["@angular/core","@core/public-api","@shared/public-api","@angular/forms","@ngrx/store","@angular/material/input","@angular/material/form-field","@angular/flex-layout/flex","@ngx-translate/core","@angular/common","@home/components/public-api"],(function(t){"use strict";var e,o,r,n,a,i,l,m,u,s,p,c,f,d,y;return{setters:[function(t){e=t,o=t.Component,r=t.NgModule},function(t){n=t.isDefinedAndNotNull},function(t){a=t.RuleNodeConfigurationComponent,i=t.SharedModule},function(t){l=t.Validators,m=t},function(t){u=t},function(t){s=t},function(t){p=t},function(t){c=t},function(t){f=t},function(t){d=t.CommonModule},function(t){y=t.HomeComponentsModule}],execute:function(){class g extends a{constructor(t,e){super(t),this.store=t,this.fb=e}configForm(){return this.getSumIntoMetadataConfigForm}onConfigurationSet(t){this.getSumIntoMetadataConfigForm=this.fb.group({inputKey:[t.inputKey,[l.required]],outputKey:[t.outputKey,[l.required]]})}prepareInputConfig(t){return{inputKey:n(t?.inputKey)?t.inputKey:null,outputKey:n(t?.outputKey)?t.outputKey:null}}}t("GetSumIntoMetadataConfigComponent",g),g.ɵfac=e.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:e,type:g,deps:[{token:u.Store},{token:m.FormBuilder}],target:e.ɵɵFactoryTarget.Component}),g.ɵcmp=e.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:g,selector:"tb-enrichment-node-sum-into-metadata-config",usesInheritance:!0,ngImport:e,template:'<section [formGroup]="getSumIntoMetadataConfigForm" fxLayout="column">\n    <mat-form-field class="mat-block">\n        <mat-label>{{\'tb.rulenode.input-key\' | translate}}</mat-label>\n        <input matInput formControlName="inputKey">\n    </mat-form-field>\n    <mat-form-field class="mat-block">\n        <mat-label>{{\'tb.rulenode.output-key\' | translate}}</mat-label>\n        <input matInput formControlName="outputKey">\n    </mat-form-field>\n</section>\n',dependencies:[{kind:"directive",type:s.MatInput,selector:"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]",inputs:["disabled","id","placeholder","name","required","type","errorStateMatcher","aria-describedby","value","readonly"],exportAs:["matInput"]},{kind:"component",type:p.MatFormField,selector:"mat-form-field",inputs:["hideRequiredMarker","color","floatLabel","appearance","subscriptSizing","hintLabel"],exportAs:["matFormField"]},{kind:"directive",type:p.MatLabel,selector:"mat-label"},{kind:"directive",type:c.DefaultLayoutDirective,selector:"  [fxLayout], [fxLayout.xs], [fxLayout.sm], [fxLayout.md],  [fxLayout.lg], [fxLayout.xl], [fxLayout.lt-sm], [fxLayout.lt-md],  [fxLayout.lt-lg], [fxLayout.lt-xl], [fxLayout.gt-xs], [fxLayout.gt-sm],  [fxLayout.gt-md], [fxLayout.gt-lg]",inputs:["fxLayout","fxLayout.xs","fxLayout.sm","fxLayout.md","fxLayout.lg","fxLayout.xl","fxLayout.lt-sm","fxLayout.lt-md","fxLayout.lt-lg","fxLayout.lt-xl","fxLayout.gt-xs","fxLayout.gt-sm","fxLayout.gt-md","fxLayout.gt-lg"]},{kind:"directive",type:m.DefaultValueAccessor,selector:"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]"},{kind:"directive",type:m.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:m.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:m.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:m.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"pipe",type:f.TranslatePipe,name:"translate"}]}),e.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:e,type:g,decorators:[{type:o,args:[{selector:"tb-enrichment-node-sum-into-metadata-config",template:'<section [formGroup]="getSumIntoMetadataConfigForm" fxLayout="column">\n    <mat-form-field class="mat-block">\n        <mat-label>{{\'tb.rulenode.input-key\' | translate}}</mat-label>\n        <input matInput formControlName="inputKey">\n    </mat-form-field>\n    <mat-form-field class="mat-block">\n        <mat-label>{{\'tb.rulenode.output-key\' | translate}}</mat-label>\n        <input matInput formControlName="outputKey">\n    </mat-form-field>\n</section>\n'}]}],ctorParameters:function(){return[{type:u.Store},{type:m.FormBuilder}]}});class x{}t("CustomNodesConfigEnrichmentModule",x),x.ɵfac=e.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:e,type:x,deps:[],target:e.ɵɵFactoryTarget.NgModule}),x.ɵmod=e.ɵɵngDeclareNgModule({minVersion:"14.0.0",version:"15.2.10",ngImport:e,type:x,declarations:[g],imports:[d,i],exports:[g]}),x.ɵinj=e.ɵɵngDeclareInjector({minVersion:"12.0.0",version:"15.2.10",ngImport:e,type:x,imports:[d,i]}),e.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:e,type:x,decorators:[{type:r,args:[{declarations:[g],imports:[d,i],exports:[g]}]}]});class C extends a{constructor(t,e){super(t),this.store=t,this.fb=e}configForm(){return this.checkKeyConfigForm}onConfigurationSet(t){this.checkKeyConfigForm=this.fb.group({key:[t.key,[l.required]]})}prepareInputConfig(t){return{key:n(t?.key)?t.key:null}}}t("CheckKeyConfigComponent",C),C.ɵfac=e.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:e,type:C,deps:[{token:u.Store},{token:m.FormBuilder}],target:e.ɵɵFactoryTarget.Component}),C.ɵcmp=e.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:C,selector:"tb-filter-node-check-key-config",usesInheritance:!0,ngImport:e,template:'<section [formGroup]="checkKeyConfigForm" fxLayout="column">\n    <mat-form-field class="mat-block">\n        <mat-label>{{\'tb.rulenode.msg-key\' | translate}}</mat-label>\n        <input matInput formControlName="key">\n    </mat-form-field>\n</section>\n',dependencies:[{kind:"directive",type:s.MatInput,selector:"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]",inputs:["disabled","id","placeholder","name","required","type","errorStateMatcher","aria-describedby","value","readonly"],exportAs:["matInput"]},{kind:"component",type:p.MatFormField,selector:"mat-form-field",inputs:["hideRequiredMarker","color","floatLabel","appearance","subscriptSizing","hintLabel"],exportAs:["matFormField"]},{kind:"directive",type:p.MatLabel,selector:"mat-label"},{kind:"directive",type:c.DefaultLayoutDirective,selector:"  [fxLayout], [fxLayout.xs], [fxLayout.sm], [fxLayout.md],  [fxLayout.lg], [fxLayout.xl], [fxLayout.lt-sm], [fxLayout.lt-md],  [fxLayout.lt-lg], [fxLayout.lt-xl], [fxLayout.gt-xs], [fxLayout.gt-sm],  [fxLayout.gt-md], [fxLayout.gt-lg]",inputs:["fxLayout","fxLayout.xs","fxLayout.sm","fxLayout.md","fxLayout.lg","fxLayout.xl","fxLayout.lt-sm","fxLayout.lt-md","fxLayout.lt-lg","fxLayout.lt-xl","fxLayout.gt-xs","fxLayout.gt-sm","fxLayout.gt-md","fxLayout.gt-lg"]},{kind:"directive",type:m.DefaultValueAccessor,selector:"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]"},{kind:"directive",type:m.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:m.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:m.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:m.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"pipe",type:f.TranslatePipe,name:"translate"}]}),e.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:e,type:C,decorators:[{type:o,args:[{selector:"tb-filter-node-check-key-config",template:'<section [formGroup]="checkKeyConfigForm" fxLayout="column">\n    <mat-form-field class="mat-block">\n        <mat-label>{{\'tb.rulenode.msg-key\' | translate}}</mat-label>\n        <input matInput formControlName="key">\n    </mat-form-field>\n</section>\n'}]}],ctorParameters:function(){return[{type:u.Store},{type:m.FormBuilder}]}});class L{}t("CustomNodesConfigFilterModule",L),L.ɵfac=e.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:e,type:L,deps:[],target:e.ɵɵFactoryTarget.NgModule}),L.ɵmod=e.ɵɵngDeclareNgModule({minVersion:"14.0.0",version:"15.2.10",ngImport:e,type:L,declarations:[C],imports:[d,i],exports:[C]}),L.ɵinj=e.ɵɵngDeclareInjector({minVersion:"12.0.0",version:"15.2.10",ngImport:e,type:L,imports:[d,i]}),e.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:e,type:L,decorators:[{type:r,args:[{declarations:[C],imports:[d,i],exports:[C]}]}]});class b extends a{constructor(t,e){super(t),this.store=t,this.fb=e}configForm(){return this.getSumConfigForm}onConfigurationSet(t){this.getSumConfigForm=this.fb.group({inputKey:[t.inputKey,[l.required]],outputKey:[t.outputKey,[l.required]]})}prepareInputConfig(t){return{inputKey:n(t?.inputKey)?t.inputKey:null,outputKey:n(t?.outputKey)?t.outputKey:null}}}t("GetSumConfigComponent",b),b.ɵfac=e.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:e,type:b,deps:[{token:u.Store},{token:m.FormBuilder}],target:e.ɵɵFactoryTarget.Component}),b.ɵcmp=e.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:b,selector:"tb-transformation-node-sum-config",usesInheritance:!0,ngImport:e,template:'<section [formGroup]="getSumConfigForm" fxLayout="column">\n    <mat-form-field class="mat-block">\n        <mat-label>{{\'tb.rulenode.input-key\' | translate}}</mat-label>\n        <input matInput formControlName="inputKey">\n    </mat-form-field>\n    <mat-form-field class="mat-block">\n        <mat-label>{{\'tb.rulenode.output-key\' | translate}}</mat-label>\n        <input matInput formControlName="outputKey">\n    </mat-form-field>\n</section>\n',dependencies:[{kind:"directive",type:s.MatInput,selector:"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]",inputs:["disabled","id","placeholder","name","required","type","errorStateMatcher","aria-describedby","value","readonly"],exportAs:["matInput"]},{kind:"component",type:p.MatFormField,selector:"mat-form-field",inputs:["hideRequiredMarker","color","floatLabel","appearance","subscriptSizing","hintLabel"],exportAs:["matFormField"]},{kind:"directive",type:p.MatLabel,selector:"mat-label"},{kind:"directive",type:c.DefaultLayoutDirective,selector:"  [fxLayout], [fxLayout.xs], [fxLayout.sm], [fxLayout.md],  [fxLayout.lg], [fxLayout.xl], [fxLayout.lt-sm], [fxLayout.lt-md],  [fxLayout.lt-lg], [fxLayout.lt-xl], [fxLayout.gt-xs], [fxLayout.gt-sm],  [fxLayout.gt-md], [fxLayout.gt-lg]",inputs:["fxLayout","fxLayout.xs","fxLayout.sm","fxLayout.md","fxLayout.lg","fxLayout.xl","fxLayout.lt-sm","fxLayout.lt-md","fxLayout.lt-lg","fxLayout.lt-xl","fxLayout.gt-xs","fxLayout.gt-sm","fxLayout.gt-md","fxLayout.gt-lg"]},{kind:"directive",type:m.DefaultValueAccessor,selector:"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]"},{kind:"directive",type:m.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:m.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:m.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:m.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"pipe",type:f.TranslatePipe,name:"translate"}]}),e.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:e,type:b,decorators:[{type:o,args:[{selector:"tb-transformation-node-sum-config",template:'<section [formGroup]="getSumConfigForm" fxLayout="column">\n    <mat-form-field class="mat-block">\n        <mat-label>{{\'tb.rulenode.input-key\' | translate}}</mat-label>\n        <input matInput formControlName="inputKey">\n    </mat-form-field>\n    <mat-form-field class="mat-block">\n        <mat-label>{{\'tb.rulenode.output-key\' | translate}}</mat-label>\n        <input matInput formControlName="outputKey">\n    </mat-form-field>\n</section>\n'}]}],ctorParameters:function(){return[{type:u.Store},{type:m.FormBuilder}]}});class k{}t("CustomNodesConfigTransformModule",k),k.ɵfac=e.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:e,type:k,deps:[],target:e.ɵɵFactoryTarget.NgModule}),k.ɵmod=e.ɵɵngDeclareNgModule({minVersion:"14.0.0",version:"15.2.10",ngImport:e,type:k,declarations:[b],imports:[d,i],exports:[b]}),k.ɵinj=e.ɵɵngDeclareInjector({minVersion:"12.0.0",version:"15.2.10",ngImport:e,type:k,imports:[d,i]}),e.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:e,type:k,decorators:[{type:r,args:[{declarations:[b],imports:[d,i],exports:[b]}]}]});class v{constructor(t){!function(t){t.setTranslation("en_US",{tb:{rulenode:{"msg-key":"Message key","input-key":"Input key","output-key":"Output key"}}},!0)}(t)}}t("CustomNodesConfigModule",v),v.ɵfac=e.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:e,type:v,deps:[{token:f.TranslateService}],target:e.ɵɵFactoryTarget.NgModule}),v.ɵmod=e.ɵɵngDeclareNgModule({minVersion:"14.0.0",version:"15.2.10",ngImport:e,type:v,imports:[d,i,y],exports:[L,x,k]}),v.ɵinj=e.ɵɵngDeclareInjector({minVersion:"12.0.0",version:"15.2.10",ngImport:e,type:v,imports:[d,i,y,L,x,k]}),e.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:e,type:v,decorators:[{type:r,args:[{imports:[d,i,y],exports:[L,x,k]}]}],ctorParameters:function(){return[{type:f.TranslateService}]}})}}}));//# sourceMappingURL=custom-nodes-config.js.map
